Перем СчетчикОбъектов;


Процедура КнопкаВыполнитьНажатие(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Функция ПолучитьМассивКонстантДляОбработки()
	Массив = Новый Массив;
	
	Для каждого Элем Из Метаданные.Константы Цикл
		//Сообщить(Элем);
		Имя         = Элем.Имя;
		Массив.Добавить(Имя);
	КонецЦикла;
	
	Возврат Массив;
КонецФункции	

Функция ПолучитьСтрокуДляСтруктуры(Структура,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода,ВернутьИмяПеременной = Ложь,ТипЗначенияИзХранилища,ГотовоеИмяПеременной)
	
	//Сообщить(" ");
	//Сообщить("ОбъектДляХранилищаЗначения = Новый Структура;");
	СчетчикОбъектов    = СчетчикОбъектов + 1;
	СчетчикОбъектовСтр = СтрЗаменить(СчетчикОбъектов,Символы.НПП,"");
	ИмяПеременной      = "Структура" + ГотовоеИмяПеременной + "_" + СчетчикОбъектовСтр;
	
	ДобавитьСтрокуКода(ТаблицаКода," ");
	//Если ТипЗначенияИзХранилища = Тип("Структура") Тогда
		ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + " = Новый Структура;");
	//Иначе	
	//	ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + " = Новый ФиксированнаяСтруктура;");
	//КонецЕсли;	 
	
	Для каждого Элем Из Структура Цикл
		Ключ     = Элем.Ключ;
		Значение = Элем.Значение;
		Если Значение = Неопределено Тогда
			//Сообщить("ОбъектДляХранилищаЗначения.Вставить(""" + Ключ + """,Неопределено);");
			ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + ".Вставить(""" + Ключ + """,Неопределено);");
			Продолжить;
		КонецЕсли;	 
		
		СтрокаЗначения = ПолучитьСтрокуДляЗначения(Значение,"",ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода,Истина,Ключ);
		Если СтрокаЗначения = Неопределено Тогда
			СтрокаЗначения = "Неопределено";
		КонецЕсли;	 
		//Сообщить("ОбъектДляХранилищаЗначения.Вставить(""" + Ключ + """," + СтрокаЗначения + ");");
		ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + ".Вставить(""" + Ключ + """," + СтрокаЗначения + ");");
	КонецЦикла;
	
	Если ТипЗначенияИзХранилища = Тип("ФиксированнаяСтруктура") Тогда
		ДобавитьСтрокуКода(ТаблицаКода,"" + ИмяПеременной + " = Новый ФиксированнаяСтруктура(" + ИмяПеременной + ");");
	КонецЕсли;	 
	
	
	Если ВернутьИмяПеременной Тогда
		Возврат ИмяПеременной;
	Иначе	
		ДобавитьСтрокуКода(ТаблицаКода,"ХранилищеЗначения = Новый ХранилищеЗначения(" + ИмяПеременной + ");");
	КонецЕсли;	 
	
	Возврат "//Была создана структура";
КонецФункции	

Функция ПолучитьСтрокуДляМассива(Структура,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода,ВернутьИмяПеременной = Ложь,ТипЗначенияИзХранилища)
	
	//Сообщить(" ");
	//Сообщить("ОбъектДляХранилищаЗначения = Новый Структура;");
	СчетчикОбъектов = СчетчикОбъектов + 1;
	СчетчикОбъектовСтр = СтрЗаменить(СчетчикОбъектов,Символы.НПП,"");
	ИмяПеременной   = "Массив" + СчетчикОбъектовСтр;
	
	ДобавитьСтрокуКода(ТаблицаКода," ");
	//Если ТипЗначенияИзХранилища = Тип("Структура") Тогда
		ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + " = Новый Массив;");
	//Иначе	
	//	ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + " = Новый ФиксированнаяСтруктура;");
	//КонецЕсли;	 
	
	Для каждого Элем Из Структура Цикл
		Значение = Элем;
		Если Значение = Неопределено Тогда
			//Сообщить("ОбъектДляХранилищаЗначения.Вставить(""" + Ключ + """,Неопределено);");
			ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + ".Добавить(Неопределено);");
			Продолжить;
		КонецЕсли;	 
		
		СтрокаЗначения = ПолучитьСтрокуДляЗначения(Значение,"",ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода,Истина);
		Если СтрокаЗначения = Неопределено Тогда
			СтрокаЗначения = "Неопределено";
		КонецЕсли;	 
		//Сообщить("ОбъектДляХранилищаЗначения.Вставить(""" + Ключ + """," + СтрокаЗначения + ");");
		ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + ".Добавить(" + СтрокаЗначения + ");");
	КонецЦикла;
	
	Если ТипЗначенияИзХранилища = Тип("ФиксированныйМассив") Тогда
		ДобавитьСтрокуКода(ТаблицаКода,"" + ИмяПеременной + " = Новый ФиксированныйМассив(" + ИмяПеременной + ");");
	КонецЕсли;	 
	
	
	Если ВернутьИмяПеременной Тогда
		Возврат ИмяПеременной;
	Иначе	
		ДобавитьСтрокуКода(ТаблицаКода,"ХранилищеЗначения = Новый ХранилищеЗначения(" + ИмяПеременной + ");");
	КонецЕсли;	 
	
	Возврат "//Была создана структура";
КонецФункции	

Функция ПолучитьСтрокуДляСоответствия(Соответствие,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода,ВернутьИмяПеременной = Ложь,ТипЗначенияИзХранилища)
	
	//Сообщить(" ");
	//Сообщить("ОбъектДляХранилищаЗначения = Новый Структура;");
	СчетчикОбъектов = СчетчикОбъектов + 1;
	СчетчикОбъектовСтр = СтрЗаменить(СчетчикОбъектов,Символы.НПП,"");
	ИмяПеременной   = "Соответствие" + СчетчикОбъектовСтр;
	
	ДобавитьСтрокуКода(ТаблицаКода," ");
	//Если ТипЗначенияИзХранилища = Тип("Соответствие") Тогда
		ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + " = Новый Соответствие;");
	//Иначе	
	//	ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + " = Новый ФиксированноеСоответствие;");
	//КонецЕсли;	 
	
	Для каждого Элем Из Соответствие Цикл
		Ключ     = Элем.Ключ;
		Значение = Элем.Значение;
		
		СтрокаЗначения = ПолучитьСтрокуДляЗначения(Значение,"",ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода,Истина);
		СтрокаКлюч     = ПолучитьСтрокуДляЗначения(Ключ,"",ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода,Истина);
		Если СтрокаЗначения = Неопределено Тогда
			СтрокаЗначения = "Неопределено";
		КонецЕсли;	 
		//Сообщить("ОбъектДляХранилищаЗначения.Вставить(""" + Ключ + """," + СтрокаЗначения + ");");
		ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + ".Вставить(" + СтрокаКлюч + "," + СтрокаЗначения + ");");
	КонецЦикла;
	
	Если ТипЗначенияИзХранилища = Тип("ФиксированноеСоответствие") Тогда
		ДобавитьСтрокуКода(ТаблицаКода,"" + ИмяПеременной + " = Новый ФиксированноеСоответствие(" + ИмяПеременной + ");");
	КонецЕсли;	 
	
	Если ВернутьИмяПеременной Тогда
		Возврат ИмяПеременной;
	Иначе	
		ДобавитьСтрокуКода(ТаблицаКода,"ХранилищеЗначения = Новый ХранилищеЗначения(" + ИмяПеременной + ");");
	КонецЕсли;	 
	
	Возврат "//Была создана структура";
КонецФункции	

Функция ПолучитьСтрокуДляСпискаЗначений(Спс,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода,ВернутьИмяПеременной = Ложь)
	
	//Сообщить(" ");
	//Сообщить("ОбъектДляХранилищаЗначения = Новый Структура;");
	СчетчикОбъектов = СчетчикОбъектов + 1;
	СчетчикОбъектовСтр = СтрЗаменить(СчетчикОбъектов,Символы.НПП,"");
	ИмяПеременной   = "СписокЗначений" + СчетчикОбъектовСтр;
	
	ДобавитьСтрокуКода(ТаблицаКода," ");
	ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + " = Новый СписокЗначений;");
	
	//Спс = Новый СписокЗначений;
	//Спс.Добавить(Справочники.Номенклатура.НайтиПоКоду("00000001728"),"Товар");
	Для каждого Элем Из Спс Цикл
		Значение      = Элем.Значение;
		Представление = Элем.Представление;
		Если Значение = Неопределено Тогда
			//Сообщить("ОбъектДляХранилищаЗначения.Вставить(""" + Ключ + """,Неопределено);");
			ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + ".Добавить(Неопределено,""" + Представление + """);");
			Продолжить;
		КонецЕсли;	 
		
		СтрокаЗначения = ПолучитьСтрокуДляЗначения(Значение,"",ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода,Истина);
		Если СтрокаЗначения = Неопределено Тогда
			СтрокаЗначения = "Неопределено";
		КонецЕсли;	 
		Если ЗначениеЗаполнено(Представление) Тогда
			ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + ".Добавить(" + СтрокаЗначения + ",""" + Представление + """);");
		Иначе	
			ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + ".Добавить(" + СтрокаЗначения + ");");
		КонецЕсли;	 
	КонецЦикла;
	
	Если ВернутьИмяПеременной Тогда
		Возврат ИмяПеременной;
	Иначе	
		ДобавитьСтрокуКода(ТаблицаКода,"ХранилищеЗначения = Новый ХранилищеЗначения(" + ИмяПеременной + ");");
	КонецЕсли;	 
	Возврат "//Была создана структура";
КонецФункции	

Функция ПолучитьСтрокуДляТаблицыЗначений(Тзн,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода,ВернутьИмяПеременной = Ложь,ГотовоеИмяПеременной)
	
	//Сообщить(" ");
	//Сообщить("ОбъектДляХранилищаЗначения = Новый Структура;");
	СчетчикОбъектов  = СчетчикОбъектов + 1;
	ЗначениеСчетчика = СчетчикОбъектов; 
	СчетчикОбъектовСтр = СтрЗаменить(СчетчикОбъектов,Символы.НПП,"");
	ИмяПеременной    = "ТаблицаЗначений" + СчетчикОбъектовСтр;
	
	ДобавитьСтрокуКода(ТаблицаКода," ");
	ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + " = Новый ТаблицаЗначений;");
	
	//Спс = Новый СписокЗначений;
	//Спс.Добавить(Справочники.Номенклатура.НайтиПоКоду("00000001728"),"Товар");
	
	Для каждого Колонка Из Тзн.Колонки Цикл
		ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + ".Колонки.Добавить(""" + Колонка.Имя + """);");
	КонецЦикла;
	
	Ном = 0;
	Для каждого СтрокаТаблицы Из Тзн Цикл
		Ном = Ном + 1;
		ДобавитьСтрокуКода(ТаблицаКода,"//Строка №" + Ном);
		ИдСтрокиТаблицы = "СтрокаТаблицы_" + СтрЗаменить(ЗначениеСчетчика,Символы.НПП,"");
		ДобавитьСтрокуКода(ТаблицаКода,ИдСтрокиТаблицы + " = " + ИмяПеременной + ".Добавить();");
		Для каждого Колонка Из Тзн.Колонки Цикл
			ЗначениеИзТаблицы = СтрокаТаблицы[Колонка.Имя];
			Если ЗначениеИзТаблицы = Неопределено Тогда
				//Сообщить("ОбъектДляХранилищаЗначения.Вставить(""" + Ключ + """,Неопределено);");
				ДобавитьСтрокуКода(ТаблицаКода,ИдСтрокиТаблицы + "." + Колонка.Имя + "=" + "Неопределено" + ";");
				Продолжить;
			КонецЕсли;	 
			
			
			СтрокаЗначения = ПолучитьСтрокуДляЗначения(ЗначениеИзТаблицы,"",ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода,Истина,Колонка.Имя);
			Если СтрокаЗначения = Неопределено Тогда
				СтрокаЗначения = "Неопределено";
			КонецЕсли;	 
			ДобавитьСтрокуКода(ТаблицаКода,ИдСтрокиТаблицы + "." + Колонка.Имя + "=" + СтрокаЗначения + ";");
		КонецЦикла;
	КонецЦикла;
	
	Если ВернутьИмяПеременной Тогда
		Возврат ИмяПеременной;
	Иначе	
		ДобавитьСтрокуКода(ТаблицаКода,"ХранилищеЗначения = Новый ХранилищеЗначения(" + ИмяПеременной + ");");
	КонецЕсли;
	
	Возврат "//Была создана структура";
КонецФункции	

Функция ПолучитьДатуСтрокой(Дат)
	Если Не ЗначениеЗаполнено(Дат) Тогда
		Возврат "'00010101'";
	КонецЕсли;	 
	Возврат "'" + Формат(Дат,"ДФ=yyyyMMdd") + Формат(Дат,"ДФ=HHmmss") + "'";
КонецФункции	

Процедура ДобавитьОбъектВТаблицу(ТаблицаОбъектов,Объект,Тип,Вид)
	Если Не ЗначениеЗаполнено(Объект) Тогда
		Возврат;
	КонецЕсли;	 
	
	СтрТаблицаОбъектов        = ТаблицаОбъектов.Добавить();
	СтрТаблицаОбъектов.Объект = Объект;
	СтрТаблицаОбъектов.Тип    = Тип;
	СтрТаблицаОбъектов.Вид    = Вид;
КонецПроцедуры

Функция ПолучитьСтрокуДляЗначения(Значение,ИмяКонстанты = "",ТаблицаСправочников,ТаблицаКода,ВернутьИмяПеременной = Ложь,ГотовоеИмяПеременной = "");
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("Строка") Тогда
		//СтрЧислоСтрок
		//СтрПолучитьСтроку
		
		ПромСтр           = СтрЗаменить(Значение,"""","""""");
		ЧислоСтрокВСтроке = СтрЧислоСтрок(ПромСтр);
		Если ЧислоСтрокВСтроке = 1 Тогда
			Возврат """" + ПромСтр + """";
		Иначе
			СтрокаРезультат = """" + СтрПолучитьСтроку(ПромСтр,1);
			Для Ккк = 2 По ЧислоСтрокВСтроке Цикл
				СтрокаРезультат = СтрокаРезультат + Символы.ПС;
				СтрокаРезультат = СтрокаРезультат + Символы.Таб +  "|" +  СтрПолучитьСтроку(ПромСтр,Ккк);
				Если Ккк = ЧислоСтрокВСтроке Тогда
					СтрокаРезультат = СтрокаРезультат + """";
				КонецЕсли;	 
			КонецЦикла;
			
			Возврат СтрокаРезультат;
			//Сообщить("Стр = """ + СтрПолучитьСтроку(ПромСтр,1));
			//ДобавитьСтрокуКода(ТаблицаКода,"Стр = """ + СтрПолучитьСтроку(ПромСтр,1));
			//Для Ккк=2 По ЧислоСтрокВСтроке Цикл
			//	Если Ккк = ЧислоСтрокВСтроке Тогда
			//		//Сообщить("|" + СтрПолучитьСтроку(ПромСтр,Ккк) + """;");
			//		ДобавитьСтрокуКода(ТаблицаКода,"|" + СтрПолучитьСтроку(ПромСтр,Ккк) + """;");
			//	иначе	
			//		//Сообщить("|" + СтрПолучитьСтроку(ПромСтр,Ккк));
			//		ДобавитьСтрокуКода(ТаблицаКода,"|" + СтрПолучитьСтроку(ПромСтр,Ккк));
			//	КонецЕсли;	 
			//КонецЦикла;
			//Если ИмяКонстанты <> "" Тогда
			//	ДобавитьСтрокуКода(ТаблицаКода,"Константы." + ИмяКонстанты + ".Установить(" + "Стр" + ");");
			//КонецЕсли;	 
		КонецЕсли;	
		
		//Возврат "ОбработкаВнутриАлгоритма";
		
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Возврат СтрЗаменить(СтрЗаменить(Значение,",","."),Символы.НПП,"");
		
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Если Значение Тогда
			Возврат "Истина";
		Иначе	
			Возврат "Ложь";
		КонецЕсли;	 
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		//Возврат "'" + Формат(Значение,"ДФ=yyyyMMdd") + Формат(Значение,"ДФ=HHmmss") + "'";
		Возврат ПолучитьДатуСтрокой(Значение);
		
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		ИмяМетаданного    = Значение.Метаданные().Имя;
		ДлинаКода         = Значение.Метаданные().ДлинаКода;
		ДлинаНаименования = Значение.Метаданные().ДлинаНаименования;
		
		ДобавитьОбъектВТаблицу(ТаблицаСправочников,Значение,"Справочник",ИмяМетаданного);
		
		Если ДлинаКода > 0 Тогда
			Если Значение.Метаданные().ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
				Возврат "ПолучитьСправочникПоРеквизиту(""" + ИмяМетаданного + """,""Код""," + СтрЗаменить(СокрЛП(Значение.Код),Символы.НПП,"") + ")";
			Иначе	
				Возврат "ПолучитьСправочникПоРеквизиту(""" + ИмяМетаданного + """,""Код"",""" + СокрЛП(Значение.Код) + """)";
			КонецЕсли;	 
		ИначеЕсли ДлинаНаименования > 0 Тогда
			Возврат "ПолучитьСправочникПоРеквизиту(""" + ИмяМетаданного + """,""Наименование"",""" + СокрЛП(Значение.Наименование) + """)";
		Иначе
			Возврат Неопределено;
			//Сообщить("//Константа " + Имя + ". Не смог определить как заплонять значение.");
		КонецЕсли;	 
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		ИмяМетаданного    = Значение.Метаданные().Имя;
		ТипНомера         = Значение.Метаданные().ТипНомера;
		ДлинаНомера       = Значение.Метаданные().ДлинаНомера;
		Если ДлинаНомера > 0 Тогда
			Если Значение.Метаданные().ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Число Тогда
				Возврат "ПолучитьДокументПоНомеру(""" + ИмяМетаданного + """," + СтрЗаменить(СокрЛП(Значение.Номер),Символы.НПП,"") + "," + ПолучитьДатуСтрокой(Значение.Дата) + ")";
			Иначе	
				Возврат "ПолучитьДокументПоНомеру(""" + ИмяМетаданного + """,""" + СокрЛП(Значение.Номер) + """," + ПолучитьДатуСтрокой(Значение.Дата) + ")";
			КонецЕсли;	 
		Иначе	
			Возврат "ПолучитьДокументПоНомеру(""" + ИмяМетаданного + """,""" + "" + """," + ПолучитьДатуСтрокой(Значение.Дата) + ")";
			//Сообщить("//Константа " + Имя + ". Не смог определить как заплонять значение.");
		КонецЕсли;	 
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		ИмяМетаданного    = Значение.Метаданные().Имя;
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Возврат "Перечисления." + ИмяМетаданного + ".ПустаяСсылка()";
		КонецЕсли;	 
		
		ИндексЗначенияПеречисления = Перечисления[ИмяМетаданного].Индекс(Значение);
		ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяМетаданного].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		
		Возврат "Перечисления." + ИмяМетаданного + "." + ИмяЗначенияПеречисления;
	ИначеЕсли ТипЗначения = Тип("ХранилищеЗначения") Тогда
		ЗначениеИзХранилища = Значение.Получить();
		Если ЗначениеИзХранилища = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		ТипЗначенияИзХранилища = ТипЗнч(ЗначениеИзХранилища);
		Если (ТипЗначенияИзХранилища = Тип("Структура")) или (ТипЗначенияИзХранилища = Тип("ФиксированнаяСтруктура")) Тогда
			Если ЗначениеИзХранилища.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	 
			Возврат ПолучитьСтрокуДляСтруктуры(ЗначениеИзХранилища,ТаблицаСправочников,ТаблицаКода,ВернутьИмяПеременной,ТипЗначенияИзХранилища,ГотовоеИмяПеременной);
		ИначеЕсли ТипЗначенияИзХранилища = Тип("СписокЗначений") Тогда
			Если ЗначениеИзХранилища.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	 
			Возврат ПолучитьСтрокуДляСпискаЗначений(ЗначениеИзХранилища,ТаблицаСправочников,ТаблицаКода,ВернутьИмяПеременной);
		ИначеЕсли ТипЗначенияИзХранилища = Тип("ТаблицаЗначений") Тогда
			Если ЗначениеИзХранилища.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	 
			Возврат ПолучитьСтрокуДляТаблицыЗначений(ЗначениеИзХранилища,ТаблицаСправочников,ТаблицаКода,ВернутьИмяПеременной,ГотовоеИмяПеременной);
		ИначеЕсли (ТипЗначенияИзХранилища = Тип("Соответствие")) или (ТипЗначенияИзХранилища = Тип("ФиксированноеСоответствие")) Тогда
			Если ЗначениеИзХранилища.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	 
			Возврат ПолучитьСтрокуДляСоответствия(ЗначениеИзХранилища,ТаблицаСправочников,ТаблицаКода,ВернутьИмяПеременной,ТипЗначенияИзХранилища);
		ИначеЕсли (ТипЗначенияИзХранилища = Тип("Массив")) или (ТипЗначенияИзХранилища = Тип("ФиксированныйМассив")) Тогда
			Если ЗначениеИзХранилища.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	 
			Возврат ПолучитьСтрокуДляМассива(ЗначениеИзХранилища,ТаблицаСправочников,ТаблицаКода,ВернутьИмяПеременной,ТипЗначенияИзХранилища);
		КонецЕсли;	 
		
		//Сообщить("ХранилищеЗначения");
		//ПолучитьСтрокуКодаДляЗначения(ЗначениеИзХранилища,Имя)
		Если ИмяКонстанты <> "" Тогда
			//Сообщить("//Здесь надо заполнить константу " + ИмяКонстанты + " в которой хранилище значения. ТипЗначенияИзХранилища="+ТипЗначенияИзХранилища);
			ДобавитьСтрокуКода(ТаблицаКода,"//Здесь надо заполнить константу " + ИмяКонстанты + " в которой хранилище значения. ТипЗначенияИзХранилища="+ТипЗначенияИзХранилища);
		КонецЕсли;	 
		Возврат Неопределено;
		
		
	ИначеЕсли (ТипЗначения = Тип("Структура")) или (ТипЗначения = Тип("ФиксированнаяСтруктура")) Тогда
		Возврат ПолучитьСтрокуДляСтруктуры(Значение,ТаблицаСправочников,ТаблицаКода,Истина,ТипЗначения,ГотовоеИмяПеременной);
	ИначеЕсли ТипЗначения = Тип("СписокЗначений") Тогда
		Возврат ПолучитьСтрокуДляСпискаЗначений(Значение,ТаблицаСправочников,ТаблицаКода,Истина);
	ИначеЕсли (ТипЗначения = Тип("Соответствие")) или (ТипЗначения = Тип("ФиксированноеСоответствие")) Тогда
		Возврат ПолучитьСтрокуДляСоответствия(Значение,ТаблицаСправочников,ТаблицаКода,Истина,ТипЗначения);
	ИначеЕсли ТипЗначения = Тип("ТаблицаЗначений") Тогда
		Возврат ПолучитьСтрокуДляТаблицыЗначений(Значение,ТаблицаСправочников,ТаблицаКода,Истина,ГотовоеИмяПеременной);
	ИначеЕсли (ТипЗначения = Тип("Массив")) или (ТипЗначения = Тип("ФиксированныйМассив")) Тогда
		Возврат ПолучитьСтрокуДляМассива(Значение,ТаблицаСправочников,ТаблицаКода,Истина,ТипЗначения);
	Иначе
		//Сообщить("//Здесь надо установить значение для константы """ + Имя + """. ТипЗначения="+ТипЗначения);
		Если ИмяКонстанты = "" Тогда //значит это подчиненное значение, которое имеет сложный тип, например в таблце значений внутри были структуры
			
		КонецЕсли;	 
		Возврат Неопределено;
	КонецЕсли;	 
КонецФункции	

Процедура ДобавитьСтрокуКода(ТаблицаКода,Стр,ДобавитьТаб = Истина)
	СтрТаблицаКода            = ТаблицаКода.Добавить();
	Если ДобавитьТаб Тогда
		СтрТаблицаКода.СтрокаКода = Символы.Таб + Стр;
	Иначе	
		СтрТаблицаКода.СтрокаКода = Стр;
	КонецЕсли;	 
КонецПроцедуры


Процедура ПолучитьСтрокуКодаДляЗначения(Значение,Имя,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода)
		ТипЗначения = ТипЗнч(Значение);
		
		
		СтрокаДляЗначения = ПолучитьСтрокуДляЗначения(Значение,Имя,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода);
		Если СтрокаДляЗначения = Неопределено Тогда
			//ДобавитьСтрокуКода(ТаблицаКода,);
			//Сообщить("//Здесь надо установить значение для константы """ + Имя + """. ТипЗначения="+ТипЗначения);
			ДобавитьСтрокуКода(ТаблицаКода,"//Здесь надо установить значение для константы """ + Имя + """. ТипЗначения="+ТипЗначения);
		ИначеЕсли ТипЗначения = Тип("ХранилищеЗначения") Тогда
			//Сообщить("Константы." + Имя + ".Установить(" + "ОбъектДляХранилищаЗначения" + ");");
			//Сообщить(" ");
			ДобавитьСтрокуКода(ТаблицаКода,"Константы." + Имя + ".Установить(" + "ХранилищеЗначения" + ");");
			ДобавитьСтрокуКода(ТаблицаКода," ");
		ИначеЕсли СтрокаДляЗначения = "ОбработкаВнутриАлгоритма" тогда
			//значит уже всё сделано
		Иначе
			//Сообщить("Константы." + Имя + ".Установить(" + СтрокаДляЗначения + ");");
			//Сообщить(" ");
			ДобавитьСтрокуКода(ТаблицаКода,"Константы." + Имя + ".Установить(" + СтрокаДляЗначения + ");");
			ДобавитьСтрокуКода(ТаблицаКода," ");
		КонецЕсли;	 
		
		//Если ТипЗначения = Тип("Строка") Тогда
		//	Сообщить("Константы." + Имя + ".Установить(""" + Значение + """);");
		//ИначеЕсли ТипЗначения = Тип("Число") Тогда
		//	Сообщить("Константы." + Имя + ".Установить(" + СтрЗаменить(Значение,",",".") + ");");
		//ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		//	Если Значение Тогда
		//		Сообщить("Константы." + Имя + ".Установить(" + "Истина" + ");");
		//	Иначе	
		//		Сообщить("Константы." + Имя + ".Установить(" + "Ложь" + ");");
		//	КонецЕсли;	 
		//ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		//	Сообщить("Константы." + Имя + ".Установить('" + Формат(Значение,"ДФ=yyyyMMdd") + Формат(Значение,"ДФ=HHmmss") + "');");
		//ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		//	ИмяМетаданного    = Значение.Метаданные().Имя;
		//	ДлинаКода         = Значение.Метаданные().ДлинаКода;
		//	ДлинаНаименования = Значение.Метаданные().ДлинаНаименования;
		//	Если ДлинаКода > 0 Тогда
		//		Если Значение.Метаданные().ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
		//			Сообщить("Константы." + Имя + ".Установить(ПолучитьСправочникПоРеквизиту(""" + ИмяМетаданного + """,""Код""," + Значение.Код + "));");
		//		Иначе	
		//			Сообщить("Константы." + Имя + ".Установить(ПолучитьСправочникПоРеквизиту(""" + ИмяМетаданного + """,""Код"",""" + Значение.Код + """));");
		//		КонецЕсли;	 
		//	ИначеЕсли ДлинаНаименования > 0 Тогда
		//		Сообщить("Константы." + Имя + ".Установить(ПолучитьСправочникПоРеквизиту(""" + ИмяМетаданного + """,""Наименование"",""" + Значение.Наименование + """));");
		//	Иначе
		//		Сообщить("//Константа " + Имя + ". Не смог определить как заплонять значение.");
		//	КонецЕсли;	 
		//ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		//	ИмяМетаданного    = Значение.Метаданные().Имя;
		//	ИндексЗначенияПеречисления = Перечисления[ИмяМетаданного].Индекс(Значение);
		//	ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяМетаданного].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		//	Сообщить("Константы." + Имя + ".Установить(Перечисления." + ИмяМетаданного + "." + ИмяЗначенияПеречисления + ");");
		//ИначеЕсли ТипЗначения = Тип("ХранилищеЗначения") Тогда
		//	ЗначениеИзХранилища = Значение.Получить();
		//	Если ЗначениеИзХранилища = Неопределено Тогда
		//		Сообщить("//Константа " + Имя + " была не заполнена.");
		//		Возврат;
		//	КонецЕсли;	 
		//	
		//	Сообщить("ХранилищеЗначения");
		//	ПолучитьСтрокуКодаДляЗначения(ЗначениеИзХранилища,Имя)
		//Иначе
		//	Сообщить("//Здесь надо установить значение для константы """ + Имя + """. ТипЗначения="+ТипЗначения);
		//КонецЕсли;	 
КонецПроцедуры

Процедура СгенерироватьКодДляЗаполненияКонстант(ТаблицаКода,ТаблицаСправочниковДляПолученияМакетовFixtures)
	МассивКонстантДляОбработки = ПолучитьМассивКонстантДляОбработки();
	//Сообщить("//код для вставки");
	ДобавитьСтрокуКода(ТаблицаКода,"Процедура ЗаполнениеКонстант() Экспорт",Ложь);
	ДобавитьСтрокуКода(ТаблицаКода,"Сообщить(""Устанавливаю значения констант"");");
	Для каждого Элем Из МассивКонстантДляОбработки Цикл
		ОбработкаПрерыванияПользователя();
		
		
		ЭлементСписка = СписокКонстантКоторыеНеНадоВыгружать.НайтиПоЗначению(Элем);
		Если ЭлементСписка <> Неопределено Тогда
			Сообщить("Константа " + Элем.Имя + " не будет выгружена, т.к. она добавлена в список невыгружаемых объектов.");
			Продолжить;
		КонецЕсли;	 
		
		Имя         = Элем;
		
		Состояние("Константы." + Имя);
		
		Значение    = Константы[Имя].Получить();
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Сообщить("//Константа " + Имя + " была не заполнена.");
			ДобавитьСтрокуКода(ТаблицаКода,"//Константа " + Имя + " была не заполнена.");
			Продолжить;
		КонецЕсли;	 
		
		
		ТипЗначения = ТипЗнч(Значение);
		Если ТипЗначения = Тип("ХранилищеЗначения") Тогда
			ЗначениеИзХранилища = Значение.Получить();
			Если ЗначениеИзХранилища = Неопределено Тогда
				Сообщить("//Константа " + Имя + " была не заполнена.");
				ДобавитьСтрокуКода(ТаблицаКода,"//Константа " + Имя + " была не заполнена.");
				Продолжить;
			КонецЕсли;	
		КонецЕсли;	 
		
		ПолучитьСтрокуКодаДляЗначения(Значение,Имя,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода);
		
		Если ТестовыйРежим Тогда
			Сообщить("ВКЛЮЧЕН ТЕСТОВЫЙ РЕЖИМ!!! ВЫГРУЖЕНЫ НЕ ВСЕ КОНСТАНТЫ!");
			Прервать;
		КонецЕсли;	 
		
		//Сообщить("ПОТОМ УБРАТЬ!!! В СгенерироватьКодДляЗаполненияКонстант");
		//Прервать;
	КонецЦикла;
	ДобавитьСтрокуКода(ТаблицаКода,"КонецПроцедуры",Ложь);
КонецПроцедуры

Процедура СгенерироватьКодДляСозданияFixturesСправочниковПоМакетам(ТаблицаКода,МассивМакетовСправочниковДляВставки)
	ДобавитьСтрокуКода(ТаблицаКода," ",Ложь);
	ДобавитьСтрокуКода(ТаблицаКода,"Процедура СоздатьFixturesСправочниковПоМакетам() Экспорт",Ложь);
	Для каждого Элем Из МассивМакетовСправочниковДляВставки Цикл
		ДобавитьСтрокуКода(ТаблицаКода,"СоздатьFixturesПоМакету(""" + Элем.ИмяМакета + """); //Загружено элементов " + Элем.ПолученоЭлементов);
	КонецЦикла;
	ДобавитьСтрокуКода(ТаблицаКода,"КонецПроцедуры",Ложь);
КонецПроцедуры

Процедура СгенерироватьКодДляСозданияFixturesРСПоМакетам(ТаблицаКода,МассивМакетовРСДляВставки)
	ДобавитьСтрокуКода(ТаблицаКода," ",Ложь);
	ДобавитьСтрокуКода(ТаблицаКода,"Процедура СоздатьFixturesРСПоМакетам() Экспорт",Ложь);
	Для каждого Элем Из МассивМакетовРСДляВставки Цикл
		ДобавитьСтрокуКода(ТаблицаКода,"СоздатьFixturesПоМакету(""" + Элем.ИмяМакета + """);");
	КонецЦикла;
	ДобавитьСтрокуКода(ТаблицаКода,"КонецПроцедуры",Ложь);
КонецПроцедуры

Процедура СгенерироватьКодСОсновнымиПроцедурами(ТаблицаКода)
	ДобавитьСтрокуКода(ТаблицаКода," ",Ложь);
	ДобавитьСтрокуКода(ТаблицаКода,"Процедура СделатьНачальноеЗаполнениеБазы() Экспорт",Ложь);
	ДобавитьСтрокуКода(ТаблицаКода,"Сообщить(""Начало обработки:"" + ТекущаяДата());");
	ДобавитьСтрокуКода(ТаблицаКода,"СоздатьFixturesСправочниковПоМакетам();");
	ДобавитьСтрокуКода(ТаблицаКода,"ЗаполнениеКонстант();");
	ДобавитьСтрокуКода(ТаблицаКода,"СоздатьFixturesРСПоМакетам();");
	ДобавитьСтрокуКода(ТаблицаКода,"Сообщить(""Окончание обработки:"" + ТекущаяДата());");
	ДобавитьСтрокуКода(ТаблицаКода,"КонецПроцедуры",Ложь);
КонецПроцедуры

Процедура ДобавитьСправочникВВыгрузку(ТаблицаОбъектов,ИмяСпр,СколькоВыгружать,ПорогДляПолннойВыгрузки)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(__ИмяСпр__.Ссылка) КАК КолЭлементов
		|ИЗ
		|	Справочник.__ИмяСпр__ КАК __ИмяСпр__";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"__ИмяСпр__",ИмяСпр);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	КолЭлементовВсего = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КолЭлементовВсего = ВыборкаДетальныеЗаписи.КолЭлементов;
	КонецЦикла;
	
	СколькоБудемВыгружать = СколькоВыгружать;
	Если КолЭлементовВсего <= ПорогДляПолннойВыгрузки Тогда
		СколькоБудемВыгружать = КолЭлементовВсего;
	КонецЕсли;	 

	
	Сообщить("Добавляю в выгрузку справочник: " + ИмяСпр + ". Всего элементов " + КолЭлементовВсего +  ". Выгружаю " + СколькоБудемВыгружать + " элементов.");
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ МаксЧислоЭлементов
		|	__ИмяСпр__.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.__ИмяСпр__ КАК __ИмяСпр__
		| ГДЕ НЕ ПометкаУдаления И НЕ Предопределенный
		|";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"__ИмяСпр__",ИмяСпр);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"МаксЧислоЭлементов",СтрЗаменить(СколькоБудемВыгружать,Символы.НПП,""));	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрТаблицаОбъектов        = ТаблицаОбъектов.Добавить();
		СтрТаблицаОбъектов.Объект = ВыборкаДетальныеЗаписи.Ссылка;
		СтрТаблицаОбъектов.Тип    = "Справочник";
		СтрТаблицаОбъектов.Вид    = ИмяСпр;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьВВыгрузкуСправочники(ТаблицаОбъектов)
	Для каждого Элем Из Метаданные.Справочники Цикл
		ЭлементСписка = СписокВидовСправочниковКоторыеНеНадоВыгружать.НайтиПоЗначению(Элем.Имя);
		Если ЭлементСписка <> Неопределено Тогда
			Сообщить("Справочник " + Элем.Имя + " не будет выгружен, т.к. он добавлен в список невыгружаемых объектов.");
			Продолжить;
		КонецЕсли;	 
		
		Если НеВыгружатьМетаданныеКоторыеНачинаютсяСоСловаУдалить Тогда
			Если НРег(Лев(Элем.Имя,7)) = "удалить" Тогда
				Сообщить("Справочник " + Элем.Имя + " не будет выгружен, т.к. он начинается со слова Удалить.");
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		Если ТестовыйРежим Тогда
			Сообщить("ВКЛЮЧЕН ТЕСТОВЫЙ РЕЖИМ!!! ВЫГРУЖЕНЫ НЕ ВСЕ СПРАВОЧНИКИ!");
			Прервать;
		КонецЕсли;	 
		
		//Сообщить("Добавляю в выгрузку справочник: " + Элем.Имя);
		ДобавитьСправочникВВыгрузку(ТаблицаОбъектов,Элем.Имя,СколькоВыгружатьЭлементаСправочника,ПорогДляПолннойВыгрузкиСправочника);
	КонецЦикла;
	
	//ПорогДляПолннойВыгрузкиСправочника
КонецПроцедуры

Процедура ПолучитьОтчетПоМакетам(МассивМакетовСправочниковДляВставки,КоментарийОтчета)
	ТаблицаОтчетПоМакетам = Новый ТаблицаЗначений;
	ТаблицаОтчетПоМакетам.Колонки.Добавить("ИмяМакета");
	ТаблицаОтчетПоМакетам.Колонки.Добавить("КолСтрок");
	Для каждого Элем Из МассивМакетовСправочниковДляВставки Цикл
		Макет    = Элем.Макет;
		КолСтрок = Макет.ВысотаТаблицы;
		
		
		СтрТаблицаОтчетПоМакетам           = ТаблицаОтчетПоМакетам.Добавить();
		СтрТаблицаОтчетПоМакетам.ИмяМакета = Элем.ИмяМакета;
		СтрТаблицаОтчетПоМакетам.КолСтрок  = КолСтрок;
	КонецЦикла;
	
	ТаблицаОтчетПоМакетам.Сортировать("КолСтрок убыв,ИмяМакета");
	//ТаблицаОтчетПоМакетам.ВыбратьСтроку();
	
	
	ПечДок              = Новый ТабличныйДокумент;
	МакетОтчетПоМакетам = ПолучитьМакет("ОтчетПоМакетам");
	
	ОбластьШапка  = МакетОтчетПоМакетам.ПолучитьОбласть("Шапка");
	ОбластьСтрока = МакетОтчетПоМакетам.ПолучитьОбласть("Строка");
	
	ПечДок.Вывести(ОбластьШапка);
	
	Для каждого СтрТаблицаОтчетПоМакетам Из ТаблицаОтчетПоМакетам Цикл
		ОбластьСтрока.Параметры.Заполнить(СтрТаблицаОтчетПоМакетам);
		ПечДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ПечДок.Показать("Отчет по сгенерированным макетам. " + КоментарийОтчета + ".");
КонецПроцедуры

Функция ПолучитьКоличествоЗаписейВРС(ИмяРС)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КолЗаписей
		|ИЗ
		|	РегистрСведений.__РС__ КАК __РС__";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"__РС__",ИмяРС);	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.КолЗаписей;
	КонецЦикла;
	
	Возврат 0;
КонецФункции	

Функция ПолучитьМакетДляВидаРС(Вид,ИмяМакета)
	
	ГенераторFixtures = ВнешниеОбработки.Создать(ПутьКГенераторуFixtures);
	ФормаГенератора   = ГенераторFixtures.ПолучитьФорму("Форма");
	ФормаГенератора.Открыть();
	ГенераторFixtures.ВыгружатьКод = Истина;
	ГенераторFixtures.ОбменДанными = Истина;
	
	ДеревоМетаданных = ГенераторFixtures.ДеревоМетаданных;
	//ДеревоМетаданных.ВыбратьСтроку();
	
	ВеткаДерева = ДеревоМетаданных.Строки[0].Строки[2];
	//Для каждого СтрокаДерева Из ВеткаСправочников.Строки Цикл
	//	Сообщить("" + СтрокаДерева.ПолноеИмяМетаданных);
	//КонецЦикла;
	НужнаяСтрокаДерева = ВеткаДерева.Строки.Найти(Вид,"ПолноеИмяМетаданных");
	Если НужнаяСтрокаДерева = Неопределено Тогда
		Сообщить("Не найдена строка РС в дереве. Вид="+вид);
		Возврат Неопределено;
	КонецЕсли;	 
	
	
	НужнаяСтрокаДерева.Выгружать         = Истина;
	НужнаяСтрокаДерева.ИспользоватьОтбор = Истина;
	
	
	
	ФормаГенератора.ЭлементыФормы.ДеревоМетаданных.ТекущаяСтрока = НужнаяСтрокаДерева;
	//ФормаГенератора.ДеревоМетаданныхПриАктивизацииСтроки("");
	
	
	Макет = Новый ТабличныйДокумент;
	Макет.Прочитать(ПутьУПустомуПравильномуМакету);
	ГенераторFixtures.СоздатьМакетДанныхПоМетаданным(Макет);
	
	ИмяМакета = "РС_" + Вид;
	Макет.Показать(ИмяМакета);
	
	ФормаГенератора.Закрыть();
	ГенераторFixtures = Неопределено;
	
	Сообщить("Получено " + Макет.ВысотаТаблицы + " строк.");
	
	Возврат Макет;
	
КонецФункции	

Процедура ПолучитьFixturesДляРС(МассивМакетовРСДляВставки)
	Для каждого Элем Из Метаданные.РегистрыСведений Цикл
		Имя = Элем.Имя;
		Если Элем.РежимЗаписи <> Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			Продолжить;
		КонецЕсли;	 
		
		ЭлементСписка = СписокВидовРСоторыеНеНадоВыгружать.НайтиПоЗначению(Имя);
		Если ЭлементСписка <> Неопределено Тогда
			Сообщить("РС " + Имя + " не будет выгружен, т.к. он добавлен в список невыгружаемых объектов.");
			Продолжить;
		КонецЕсли;	 
		
		Если НеВыгружатьМетаданныеКоторыеНачинаютсяСоСловаУдалить Тогда
			Если НРег(Лев(Элем.Имя,7)) = "удалить" Тогда
				Сообщить("РС " + Элем.Имя + " не будет выгружен, т.к. он начинается со слова Удалить.");
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		Состояние("РС " + Имя);
		
		
		Если Элем.Измерения.Количество() = 0 Тогда //такие РС xddDataFixtureGen не переваривает, хотя в типовых они встречаются
			Сообщить("Не стал выгружать РС " + Имя + ", т.к. у него 0 измерений.");
			Продолжить;
		КонецЕсли;	 
		
		КоличествоЗаписейВРС = ПолучитьКоличествоЗаписейВРС(Имя);
		Если КоличествоЗаписейВРС > ПорогДляПолннойВыгрузкиРС Тогда
			Продолжить;
		КонецЕсли;	 
		Если КоличествоЗаписейВРС = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Сообщить("Выгружаю РС " + Имя + ", КоличествоЗаписей="+КоличествоЗаписейВРС);
		
		
		ИмяМакета = "";
		Попытка
			Макет = ПолучитьМакетДляВидаРС(Имя,ИмяМакета);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			Сообщить("" + ОписаниеОшибки);
			Сообщить("!!!!!!!!!!!!!!!!!!!! Не смог получить fixture для РС " + Имя);
			Если Найти(ОписаниеОшибки,"ОсновнойЗапрос") > 0 Тогда
				Сообщить("Возможно проблема в функциональных опциях.");
			КонецЕсли;	 
			
			Продолжить;
		КонецПопытки;
		//Сообщить("Получено " + Макет.ВысотаТаблицы + " строк.");
		
		
		СтруктураМакета = Новый Структура;
		СтруктураМакета.Вставить("Макет",Макет);
		СтруктураМакета.Вставить("ИмяМакета",ИмяМакета);
		
		МассивМакетовРСДляВставки.Добавить(СтруктураМакета);
		
		
		
		Если ТестовыйРежим Тогда
			Сообщить("ВКЛЮЧЕН ТЕСТОВЫЙ РЕЖИМ!!! ВЫГРУЖЕНЫ НЕ ВСЕ РС!");
			Прервать;
		КонецЕсли;	 
		//Сообщить("ПОТОМ УБРАТЬ!!!!!!!!!!!!!!!!!");
		//Прервать;
	КонецЦикла;
КонецПроцедуры

Процедура кнГенерацияДанных(Элемент)
	Сообщить("НАЧАЛО ОБРАБОТКИ " + ТекущаяДата());
	СчетчикОбъектов = 0;
	
	ФайлМакета = Новый Файл(ПутьУПустомуПравильномуМакету);
	Если Не ФайлМакета.Существует() Тогда
		Сообщить("Файл макета " + ПутьУПустомуПравильномуМакету + " не найден!");
		Возврат;
	КонецЕсли;	 
	
	ТаблицаСправочниковДляПолученияМакетовFixtures = Новый ТаблицаЗначений;
	ТаблицаСправочниковДляПолученияМакетовFixtures.Колонки.Добавить("Объект");
	ТаблицаСправочниковДляПолученияМакетовFixtures.Колонки.Добавить("Тип");
	ТаблицаСправочниковДляПолученияМакетовFixtures.Колонки.Добавить("Вид");
	
	ТаблицаКода = Новый ТаблицаЗначений;
	ТаблицаКода.Колонки.Добавить("СтрокаКода");
	
	//ГЕНЕРАЦИЯ КОДА ДЛЯ ЗАПОЛНЕНИЯ КОНСТАНТ
	//Сообщить("ПОТОМ ВЕРНУТЬ!!! СгенерироватьКодДляЗаполненияКонстант");
	Если флагВыгружатьКонстанты Тогда
		СгенерироватьКодДляЗаполненияКонстант(ТаблицаКода,ТаблицаСправочниковДляПолученияМакетовFixtures);
	КонецЕсли;	 
	
	
	
	Если флагВыгружатьСправочники Тогда
		ДобавитьВВыгрузкуСправочники(ТаблицаСправочниковДляПолученияМакетовFixtures);
	КонецЕсли;	 
	
	//Сообщить("ПОТОМ ВЕРНУТЬ!!! ДобавитьВВыгрузкуСправочники");

	
	
	
	
	
	//ГЕНЕРАЦИЯ МАКЕТОВ
	
	ТаблицаСправочниковДляПолученияМакетовFixtures.Свернуть("Объект,Тип,Вид");
	ТаблицаСправочниковДляПолученияМакетовFixtures.Сортировать("Вид,Объект");
	
	
	//ТаблицаСправочниковДляПолученияМакетовFixtures.ВыбратьСтроку();
	Сообщить("   ");
	
	
	МассивМакетовСправочниковДляВставки = Новый Массив;
	//ДобавитьМассивмакетовОВОбработку(МассивМакетовСправочниковДляВставки,ПутьКОбработке);
	
	
	//ГЕНЕРАЦИЯ FIXTURES ДЛЯ СПРАВОЧНИКОВ, КОТОРЫЕ БЫЛИ ПОЛУЧЕНЫ ОТ КОНСТАНТ И ПРОСТО СПРАВОЧНИКОВ
	//Сообщить("ПОТОМ ВЕРНУТЬ!!! ПолучитьFixturesДляСправочников()");
	ПолучитьFixturesДляСправочников(ТаблицаСправочниковДляПолученияМакетовFixtures,МассивМакетовСправочниковДляВставки);
	
	
	
	
	//ГЕНЕРАЦИЯ FIXTURES ДЛЯ РЕГИСТРОВ СВЕДЕНИЙ
	МассивМакетовРСДляВставки = Новый Массив;
	Если флагВыгружатьРС Тогда
		ПолучитьFixturesДляРС(МассивМакетовРСДляВставки);
	КонецЕсли;	 
	
	
	
	
	
	ПолучитьОтчетПоМакетам(МассивМакетовСправочниковДляВставки,"Справочники");
	ПолучитьОтчетПоМакетам(МассивМакетовРСДляВставки,"РС");
	
	ПутьКОбработке = ПутьКШаблонуОбработки;
	
	

	
	//ГЕНЕРАЦИЯ КОДА ДЛЯ СОЗДАНИЯ FIXTURES
	СгенерироватьКодДляСозданияFixturesСправочниковПоМакетам(ТаблицаКода,МассивМакетовСправочниковДляВставки);
	СгенерироватьКодДляСозданияFixturesРСПоМакетам(ТаблицаКода,МассивМакетовРСДляВставки);
	СгенерироватьКодСОсновнымиПроцедурами(ТаблицаКода);
	
	
	
	
	
	ДобавитьМассивМакетовВОбработкуИКодМодуля(МассивМакетовСправочниковДляВставки,МассивМакетовРСДляВставки,ПутьКОбработке,ТаблицаКода);
	
	
	Сообщить("ОКОНЧАНИЕ ОБРАБОТКИ " + ТекущаяДата());
	
КонецПроцедуры


Функция ПолучитьТаблицуВидовСправочников(ТаблицаОбъектов)
	КопияТаблицы = ТаблицаОбъектов.Скопировать();
	
	КопияТаблицы.Свернуть("Вид");
	КопияТаблицы.Сортировать("Вид");
	
	Возврат КопияТаблицы;
КонецФункции	


Функция ПолучитьМакетДляВидаСправочника(Вид,ВсяТаблицаОбъектов,ИмяМакета,ПолученоЭлементов)
	Отбор = Новый Структура();
	Отбор.Вставить("Вид",Вид);
	МассивСтрок = ВсяТаблицаОбъектов.НайтиСтроки(Отбор);
	
	//СтруктураПараметров = Новый Структура;
	
	МассивОбъектов = Новый Массив;
	
	Для каждого СтрокаСОбъектов Из МассивСтрок Цикл
		//Сообщить("" + СтрокаСОбъектов.Объект + ", Вид="+СтрокаСОбъектов.Вид);
		
		//СтруктураОбъекта = Новый Структура;
		//СтруктураОбъекта.Вставить("Объект",СтрокаСОбъектов.Объект);
		//СтруктураОбъекта.Вставить("Вид",СтрокаСОбъектов.Вид);
		
		МассивОбъектов.Добавить(СтрокаСОбъектов.Объект);
		
	КонецЦикла;
	
	//СтруктураПараметров.Вставить("МассивОбъектов",МассивОбъектов);
	
	
	
	ГенераторFixtures = ВнешниеОбработки.Создать(ПутьКГенераторуFixtures);
	ФормаГенератора   = ГенераторFixtures.ПолучитьФорму("Форма");
	ФормаГенератора.Открыть();
	ГенераторFixtures.ВыгружатьКод = Истина;
	ГенераторFixtures.ОбменДанными = Истина;
	
	ДеревоМетаданных = ГенераторFixtures.ДеревоМетаданных;
	//ДеревоМетаданных.ВыбратьСтроку();
	
	ВеткаСправочников = ДеревоМетаданных.Строки[0].Строки[0];
	//Для каждого СтрокаДерева Из ВеткаСправочников.Строки Цикл
	//	Сообщить("" + СтрокаДерева.ПолноеИмяМетаданных);
	//КонецЦикла;
	НужнаяСтрокаДерева = ВеткаСправочников.Строки.Найти(Вид,"ПолноеИмяМетаданных");
	Если НужнаяСтрокаДерева = Неопределено Тогда
		Сообщить("Не найдена строка справочника в дереве. Вид="+вид);
		Возврат Неопределено;
	КонецЕсли;	 
	
	
	НужнаяСтрокаДерева.Выгружать         = Истина;
	НужнаяСтрокаДерева.ИспользоватьОтбор = Истина;
	
	
	
	ФормаГенератора.ЭлементыФормы.ДеревоМетаданных.ТекущаяСтрока = НужнаяСтрокаДерева;
	//ФормаГенератора.ДеревоМетаданныхПриАктивизацииСтроки("");
	
	
	ЭлементОтбора                = ГенераторFixtures.КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СпсЗначений = Новый СписокЗначений;
	//СпсЗначений.ЗагрузитьЗначения(ВсяТаблицаОбъектов.ВыгрузитьКолонку("Объект"));
	СпсЗначений.ЗагрузитьЗначения(МассивОбъектов);
	ЭлементОтбора.ПравоеЗначение = СпсЗначений;
	
	ЭлементОтбора.Использование = Истина;
	
	НужнаяСтрокаДерева.НастройкиКомпоновщика = ГенераторFixtures.КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор;
	
	ПолученоЭлементов = СпсЗначений.Количество();
	Сообщить("Получаю fixtures для справочника " + Вид + ", в отборе " + ПолученоЭлементов + " элементов.");	
	
	Макет = Новый ТабличныйДокумент;
	Макет.Прочитать(ПутьУПустомуПравильномуМакету);
	ГенераторFixtures.СоздатьМакетДанныхПоМетаданным(Макет);
	
	ИмяМакета = "Справочник_" + Вид;
	Макет.Показать(ИмяМакета);
	
	ФормаГенератора.Закрыть();
	ГенераторFixtures = Неопределено;
	
	Сообщить("Получено " + Макет.ВысотаТаблицы + " строк.");
	
	Возврат Макет;
	
КонецФункции	

Процедура ПолучитьFixturesДляСправочников(ТаблицаОбъектов,МассивМакетовСправочниковДляВставки)
	
	ФайлГенератораfixtures = Новый Файл(ПутьКГенераторуFixtures);
	Если Не ФайлГенератораfixtures.Существует() Тогда
		Сообщить("Не найден файл генератора Fixtures.");
		Возврат;
	КонецЕсли;	 

	
	ТаблицаВидов = ПолучитьТаблицуВидовСправочников(ТаблицаОбъектов);
	//ТаблицаВидов.ВыбратьСтроку();
	
	Для каждого СтрТаблицаВидов Из ТаблицаВидов Цикл
		ОбработкаПрерыванияПользователя();
		
		Вид = СтрТаблицаВидов.Вид;
		//Сообщить("Получаю fixtures для справочника " + Вид);
		
		ИмяМакета = "";
		ПолученоЭлементов = 0;
		Попытка
			Макет = ПолучитьМакетДляВидаСправочника(Вид,ТаблицаОбъектов,ИмяМакета,ПолученоЭлементов);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			Сообщить("" + ОписаниеОшибки);
			Сообщить("!!!!!!!!!!!!!!!!!!!! Не смог получить fixture для справочника " + Вид);
			Если Найти(ОписаниеОшибки,"ОсновнойЗапрос") > 0 Тогда
				Сообщить("Возможно проблема в функциональных опциях.");
			КонецЕсли;	 
			
			Продолжить;
		КонецПопытки;
		//Сообщить("Получено " + Макет.ВысотаТаблицы + " строк.");
		
		
		
		СтруктураМакета = Новый Структура;
		СтруктураМакета.Вставить("Макет",Макет);
		СтруктураМакета.Вставить("ИмяМакета",ИмяМакета);
		СтруктураМакета.Вставить("ПолученоЭлементов",ПолученоЭлементов);
		
		МассивМакетовСправочниковДляВставки.Добавить(СтруктураМакета);
		
		//Сообщить("ПОТОМ УБРАТь!!! ВЫГРУЖАЕТСЯ ТОЛЬКО ОДИН СПРАВОЧНИК!!!");
		//Прервать;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура СделатьСообщение(Стр);
	Сообщить(Стр);
КонецПроцедуры

Процедура ВыполнитьКомандуОС(Стр)
	КомандаСистемы(Стр);
	//СистемнаяИнформация = Новый СистемнаяИнформация;
	//
	//Если (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86) или (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда
	//	Попытка
	//		ИмяВременногоBAT = ПолучитьИмяВременногоФайла("cmd");
	//		
	//		//ЗТ = Новый ЗаписьТекста(ИмяВременногоBAT,"UTF-8",,Истина); 
	//		ЗТ = Новый ЗаписьТекста(ИмяВременногоBAT,"UTF-8",,Истина); 
	//		ЗТ.ЗаписатьСтроку(Стр); 
	//		ЗТ.Закрыть();
	//		
	//		WshShell = Новый COMОбъект("WScript.Shell");
	//		//Сообщить(Стр);
	//		WshShell.Run(ИмяВременногоBAT,7,-1);	
	//		УдалитьФайлы(ИмяВременногоBAT);
	//	Исключение
	//		#Если Клиент Тогда
	//		КомандаСистемы(Стр);
	//		#КонецЕсли
	//	КонецПопытки;
	//Иначе
	//	ВызватьИсключение "Команда системы реализована только под Windows.";
	//КонецЕсли;	 
	
КонецПроцедуры


Функция РаспаковатьEPF(ИмяФайла,КаталогРаспаковки)
	ФайлПрекомит = Новый Файл(ПутьКPrecommit);
	Если НЕ ФайлПрекомит.Существует() Тогда
		Сообщить("Не найден каталог прекоммита!");
		Возврат Ложь;
	КонецЕсли;	 

	
	ГенерироватьУФ       = Ложь;
	КаталогИнструментов  = ПутьКPrecommit;
	ЭтоУФ                = Ложь;
	Попытка
		
		Файл = Новый Файл(ИмяФайла);
		
		//ИмяКаталогаДляИсходников = Файл.Путь + "Src";
		ИмяКаталогаДляИсходников = КаталогРаспаковки;
		
		Если ГенерироватьУФ Тогда
			ПутьКФайлуМодуля = ИмяКаталогаДляИсходников + "\" + Файл.ИмяБезРасширения + "\Form\Форма\Форма.txt";
		Иначе	
			ПутьКФайлуМодуля = ИмяКаталогаДляИсходников + "\" + Файл.ИмяБезРасширения + "\ObjectModule.txt";
		КонецЕсли;	 
		
		
		
		//ИмяКаталогаДляИсходников = КаталогВременныхФайлов() + "\src";
		
		
		УдалитьФайлы(ИмяКаталогаДляИсходников + "\" + Файл.ИмяБезРасширения);
		ФайлКаталогSrc = Новый Файл(ИмяКаталогаДляИсходников);
		Если Не ФайлКаталогSrc.Существует() Тогда
			СоздатьКаталог(ИмяКаталогаДляИсходников);
		КонецЕсли;	 
		
		СтрокаРазборкиEpf = "python " + КаталогИнструментов + "\pyv8unpack.py  """ +  ИмяФайла + """ """ + ИмяКаталогаДляИсходников + """";
		СделатьСообщение("Делаю распаковку " + Файл.ПолноеИмя);
		СделатьСообщение("Строка распаковки: " + СтрокаРазборкиEpf);
		//КомандаСистемы(СтрокаРазборкиEpf,КаталогИнструментов);
		ВыполнитьКомандуОС(СтрокаРазборкиEpf);
		
		
		//Файл = Новый Файл(ПутьКФайлуМодуля);
		//Если Не Файл.Существует() Тогда
		//	СделатьСообщение("Не найден файл после распаковки: " + ПутьКФайлуМодуля);
		//	Если ЭтоУФ Тогда
		//		СделатьСообщение("Возможно это обработка для обычных форм, а не для управляемых форм.");
		//	Иначе	
		//		СделатьСообщение("Возможно это обработка для управляемых форм, а не для обычных форм.");
		//	КонецЕсли;	 
		//	Возврат Ложь;
		//КонецЕсли;	 
		
		
	Исключение
		СделатьСообщение("Не смог распаковать " + ИмяФайла);
		СделатьСообщение(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Процедура УбратьЗаменитьЗапрещенныеСимволыИзСтроки(Стр) 
	Стр = СтрЗаменить(Стр,".","_");
	Стр = СтрЗаменить(Стр,",","");
	Стр = СтрЗаменить(Стр,":","");
	Стр = СтрЗаменить(Стр,";","");
	Стр = СтрЗаменить(Стр,"-","_");
	Стр = СтрЗаменить(Стр,"+","");
	//Стр = СтрЗаменить(Стр,"<","");
	//Стр = СтрЗаменить(Стр,">","");
КонецПроцедуры


Процедура ЗаписатьМакетСПравильнымИменем(ИмяМакета,Макет,КаталогДляРаботы,ИДМакета)
		УбратьЗаменитьЗапрещенныеСимволыИзСтроки(ИмяМакета);
		
		УИД = Новый УникальныйИдентификатор;
		//Сообщить("ПРОИСХОДИТ ПОДМЕНА УИД!!! ПОТОМ УБРАТЬ!!!");
		//УИД = "7a3e66f5-c873-4e1b-9d97-2c5359d503a9";
		УИД = СокрЛП(УИД);
		
		ИДМакета = УИД;
		
		ИмяФайлаОписанияМакета = КаталогДляРаботы + "\" + УИД;
		
		ЗТ = Новый ЗаписьТекста(ИмяФайлаОписанияМакета,"UTF-8",,Истина); 
		ЗТ.ЗаписатьСтроку("{1,"); 
		ЗТ.ЗаписатьСтроку("{2,0,"); 
		ЗТ.ЗаписатьСтроку("{1,"); 
		ЗТ.ЗаписатьСтроку("{0,0," + УИД + "},""" + ИмяМакета + ""","); 
		ЗТ.ЗаписатьСтроку("{1,""ru"",""" + ИмяМакета + """},"""",0,0}"); 
		ЗТ.ЗаписатьСтроку("},0}"); 
		
		ЗТ.Закрыть();
		
		//Сообщить("Записал описание макета " + ИмяФайлаОписанияМакета);
		
		
		ФайлТелоМакета = КаталогДляРаботы + "\" + УИД + ".0";
		//Макет = Новый ТабличныйДокумент;
		Макет.Записать(ФайлТелоМакета);
КонецПроцедуры

Функция ПолучитьИмяФайлаRoot(КаталогДляРаботы)
	
	СтрокаВозврата = Неопределено;
	
	ИмяФайла = КаталогДляРаботы + "\root";
	ФайлПроверкаСуществования = Новый Файл(ИмяФайла);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		Сообщить("Файл " + ИмяФайла + " не существует!");
		Возврат Неопределено;
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = Сред(Стр,4);
		Стр = Лев(Стр,СтрДлина(Стр)-2);
		//Сообщить(Стр);
		
		СтрокаВозврата = Стр;
	КонецЦикла;	
	
	Текст.Закрыть();
	
	
	Возврат СтрокаВозврата;
КонецФункции	

Процедура ЗаписатьВФайлRootИДМакетов(ПутьКRoot,МассивМакетовСправочниковДляВставки)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКRoot,"UTF-8");
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайла,"UTF-8",,Истина); 
	
	СтрокаДляИДМакетов = "{3daea016-69b7-4ed4-9453-127911372fe6,";
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Поз = Найти(Стр,СтрокаДляИДМакетов);
		Если Поз > 0 Тогда
			//это строка в которой лежат макеты
			ПромСтр = СтрЗаменить(Стр,СтрокаДляИДМакетов,"");
			Поз1 = Найти(ПромСтр,",");
			Поз2 = Найти(ПромСтр,"}");
			Поз  = Мин(Поз1,Поз2);
			
			ИдУжеСуществующихМакетов = "";
			
			СтрТекКолМакетов  = Лев(ПромСтр,Поз-1);
			ТекКолМакетов     = Число(СтрТекКолМакетов);
			Если ТекКолМакетов > 0 Тогда
				ИдУжеСуществующихМакетов = Сред(ПромСтр,Поз1);
				ИдУжеСуществующихМакетов = Лев(ИдУжеСуществующихМакетов,СтрДлина(ИдУжеСуществующихМакетов)-2);//убрали },
			КонецЕсли;	 
			НовоеЧислоМакетов = ТекКолМакетов + МассивМакетовСправочниковДляВставки.Количество();
			СтрНовоеЧислоМакетов  = СтрЗаменить(Строка(НовоеЧислоМакетов),Символы.НПП,"");
			
			СтрокаДляИДМакетов = СтрокаДляИДМакетов + СтрНовоеЧислоМакетов + ИдУжеСуществующихМакетов;
			Для каждого Элем Из МассивМакетовСправочниковДляВставки Цикл
				ИдМакета = Элем.ИдМакета;
				СтрокаДляИДМакетов = СтрокаДляИДМакетов + "," + ИдМакета;
			КонецЦикла;
			СтрокаДляИДМакетов = СтрокаДляИДМакетов + "},";
			
			Стр                = СтрокаДляИДМакетов;
		КонецЕсли;	 
		
		ЗТ.ЗаписатьСтроку(Стр); 
	КонецЦикла;	
	
	
	
	Текст.Закрыть();
	ЗТ.Закрыть();
	
	//Сообщить("Записал " + ИмяВременногоФайла);
	
	КопироватьФайл(ИмяВременногоФайла,ПутьКRoot);
	
	
КонецПроцедуры

Процедура ДобавитьСтрокиВФайлRenames(ПтуьКRenames,МассивМакетовСправочниковДляВставки)
	ЗТ = Новый ЗаписьТекста(ПтуьКRenames,"UTF-8",,Истина); 
	
	Для каждого Элем Из МассивМакетовСправочниковДляВставки Цикл
		ЗТ.ЗаписатьСтроку(Элем.ИдМакета + "-->und\" + Элем.ИдМакета); 
		ЗТ.ЗаписатьСтроку(Элем.ИдМакета + ".0-->Макеты\" + Элем.ИмяМакета + ".mxl"); 
		ЗТ.ЗаписатьСтроку(Элем.ИдМакета + ".0-->und\" + Элем.ИдМакета + ".0"); 
	КонецЦикла;
	
	ЗТ.Закрыть();
	
КонецПроцедуры

Процедура СкопироватьФайлыМакетовВСлужебныйКаталог(КудаСкопироватьМакеты,МассивМакетовСправочниковДляВставки)
	ФайлПроверкаСуществования = Новый Файл(КудаСкопироватьМакеты);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		СоздатьКаталог(КудаСкопироватьМакеты);
	КонецЕсли;	 
	
	
	Для каждого Элем Из МассивМакетовСправочниковДляВставки Цикл
		Макет = Элем.Макет;
		//Макет = Новый ТабличныйДокумент;
		Макет.Записать(КудаСкопироватьМакеты + "\" + Элем.ИмяМакета + ".mxl");
	КонецЦикла;
КонецПроцедуры


Процедура ДобавитьВМодульОбъектаОбработкиТаблицуКода(ПутькМодулюОбработки,ТаблицаКода)
	ФайлПроверкаСуществования = Новый Файл(ПутькМодулюОбработки);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		Сообщить("Файл " + ПутькМодулюОбработки + " не существует!");
		Возврат;
	КонецЕсли;	 
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	
	//скопируем то, что уже есть
	КопироватьФайл(ПутькМодулюОбработки,ИмяВременногоФайла);
	
	
	
	
	//ЗТ = Новый ЗаписьТекста(ИмяВременногоФайла,"UTF-8",,Истина); 
	ЗТ = Новый ЗаписьТекста; 
	ЗТ.Открыть(ИмяВременногоФайла,"UTF-8",,Истина);
	Для каждого СтрТаблицаКода Из ТаблицаКода Цикл
		ЗТ.ЗаписатьСтроку(СтрТаблицаКода.СтрокаКода); 		
	КонецЦикла;
	ЗТ.Закрыть();
	
	
	КопироватьФайл(ИмяВременногоФайла,ПутькМодулюОбработки);
КонецПроцедуры

Процедура ЗаписатьСтрокуПодключенияКxUnitВМодульОбработки(ПутькМодулюОбработки)
	ФайлПроверкаСуществования = Новый Файл(ПутькМодулюОбработки);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		Сообщить("Файл " + ПутькМодулюОбработки + " не существует!");
		Возврат;
	КонецЕсли;	 
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	
	
	ЗТ = Новый ЗаписьТекста; 
	ЗТ.Открыть(ИмяВременногоФайла,"UTF-8",,Истина);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутькМодулюОбработки,"UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Найти(Стр,"тут должно быть определено, как подключиться к xUnit") > 0 Тогда
			Стр = СтрокаПодключенияКxUnit;
		КонецЕсли;	 
		
		ЗТ.ЗаписатьСтроку(Стр); 		
	КонецЦикла;	
	
	Текст.Закрыть();
	ЗТ.Закрыть();
	
	
	КопироватьФайл(ИмяВременногоФайла,ПутькМодулюОбработки);
КонецПроцедуры

Процедура ДобавитьМассивМакетовВОбработкуИКодМодуля(МассивМакетовСправочниковДляВставки,МассивМакетовРСДляВставки,ПутьКОбработке,ТаблицаКода)
	ФайлОбработки  = Новый Файл(ПутьКОбработке);
	Если НЕ ФайлОбработки.Существует() Тогда
		Сообщить("Файл " + ПутьКОбработке + " не найден.");
		Возврат;
	КонецЕсли;	 
	
	
	
	КаталогРаспаковки = "C:\Temp\111";
	//КаталогДляРаботы    = ФайлОбработки.Путь + "Src\" + ФайлОбработки.ИмяБезРасширения + "\und";
	КаталогДляРаботы    = КаталогРаспаковки + "\" + ФайлОбработки.ИмяБезРасширения +  "\und";
	//ПутьКИсходникам     = ФайлОбработки.Путь + "Src\" + ФайлОбработки.ИмяБезРасширения;
	ПутьКИсходникам     = КаталогРаспаковки + "\" +  ФайлОбработки.ИмяБезРасширения;
	КаталогИнструментов = ПутьКPrecommit;
	
	ИмяВременнойEPF     = ПутьКГенерируемойEPF;
	УдалитьФайлы(ИмяВременнойEPF);
	
	
	
	
	//СтрокаСборкиEpf = "python " + КаталогИнструментов + "\pyv8unpack.py --compile """ +  ПутьКИсходникам  + """ """ + ИмяВременнойEPF + """";
	//Сообщить("СтрокаСборкиEpf="+СтрокаСборкиEpf);
	//ВыполнитьКомандуОС(СтрокаСборкиEpf);
	//Сообщить("ПОТОМ ВЕРНУТЬ СОЗДАНИЕ EPF С МАКЕТАМИ!!!!!!!!!!!!!!!");
	//Возврат;
	
	
	Если НЕ РаспаковатьEPF(ПутьКОбработке,КаталогРаспаковки) Тогда
		Возврат;
	КонецЕсли;	 
	
	//Возврат;
	
	
	//Для каждого Элем Из МассивМакетовСправочниковДляВставки Цикл
	//	ИмяМакета = Элем.ИмяМакета;
	//	УбратьЗаменитьЗапрещенныеСимволыИзСтроки(ИмяМакета);
	//	Элем.ИмяМакета = ИмяМакета;
	//КонецЦикла;
	
	
	//Возврат;
	//Сообщить("ПОТОМ ВЕРНУТЬ РАСПАКОВКУ!!!!!!!!!!!!!!!");
	
	
	
	
	//СтрокаСборкиEpf = "python " + КаталогИнструментов + "\pyv8unpack.py --compile """ +  ПутьКИсходникам  + """ """ + ИмяВременнойEPF + """";
	//Сообщить("СтрокаСборкиEpf="+СтрокаСборкиEpf);
	//ВыполнитьКомандуОС(СтрокаСборкиEpf);
	//Сообщить("ПОТОМ ВЕРНУТЬ СОЗДАНИЕ EPF С МАКТАМИ!!!!!!!!!!!!!!!");
	//Возврат;
	
	
	Для каждого Элем Из МассивМакетовСправочниковДляВставки Цикл
		ИмяМакета = Элем.ИмяМакета;
		Макет     = Элем.Макет;
		ИДМакета  = "";
		ЗаписатьМакетСПравильнымИменем(ИмяМакета,Макет,КаталогДляРаботы,ИДМакета);
		Элем.Вставить("ИДМакета",ИДМакета);
	КонецЦикла;
	
	Для каждого Элем Из МассивМакетовРСДляВставки Цикл
		ИмяМакета = Элем.ИмяМакета;
		Макет     = Элем.Макет;
		ИДМакета  = "";
		ЗаписатьМакетСПравильнымИменем(ИмяМакета,Макет,КаталогДляРаботы,ИДМакета);
		Элем.Вставить("ИДМакета",ИДМакета);
	КонецЦикла;
	
	
	
	ИмяФайлаRoot = ПолучитьИмяФайлаRoot(КаталогДляРаботы);
	Если ИмяФайлаRoot = Неопределено Тогда
		Сообщить("Не смог прочитать файл root.");
		Возврат;
	КонецЕсли;	
	
	ПутьКRoot = КаталогДляРаботы + "\" + ИмяФайлаRoot;
	ЗаписатьВФайлRootИДМакетов(ПутьКRoot,МассивМакетовСправочниковДляВставки);
	ЗаписатьВФайлRootИДМакетов(ПутьКRoot,МассивМакетовРСДляВставки);
	
	ПтуьКRenames = ПутьКИсходникам + "\renames.txt";
	ДобавитьСтрокиВФайлRenames(ПтуьКRenames,МассивМакетовСправочниковДляВставки);
	ДобавитьСтрокиВФайлRenames(ПтуьКRenames,МассивМакетовРСДляВставки);
	
	КудаСкопироватьМакеты = ПутьКИсходникам + "\Макеты";
	СкопироватьФайлыМакетовВСлужебныйКаталог(КудаСкопироватьМакеты,МассивМакетовСправочниковДляВставки);
	СкопироватьФайлыМакетовВСлужебныйКаталог(КудаСкопироватьМакеты,МассивМакетовРСДляВставки);
	
	
	
	ПутькМодулюОбработки = ПутьКИсходникам + "\ObjectModule.txt";
	ЗаписатьСтрокуПодключенияКxUnitВМодульОбработки(ПутькМодулюОбработки);
	Если ТаблицаКода <> Неопределено Тогда
		ДобавитьВМодульОбъектаОбработкиТаблицуКода(ПутькМодулюОбработки,ТаблицаКода);
	КонецЕсли;	 
	
	
	
	
	СтрокаСборкиEpf = "python " + КаталогИнструментов + "\pyv8unpack.py --compile """ +  ПутьКИсходникам  + """ """ + ИмяВременнойEPF + """";
	Сообщить("СтрокаСборкиEpf="+СтрокаСборкиEpf);
	
	ВыполнитьКомандуОС(СтрокаСборкиEpf);
	
КонецПроцедуры


Процедура ОсновныеДействияФормыТестРаспаковки(Кнопка)
	МассивМакетовСправочниковДляВставки = Новый Массив;
	ТД = Новый ТабличныйДокумент;
	ТД.Прочитать("C:\Temp\Справочник.ШаблонПисем.mxl");
	
	СтруктураМакета = Новый Структура;
	СтруктураМакета.Вставить("Макет",ТД);
	СтруктураМакета.Вставить("ИмяМакета","Справочник.ШаблонПисем");
	
	МассивМакетовСправочниковДляВставки.Добавить(СтруктураМакета);
	
	ПутьКОбработке = "C:\Commons\Rep\vanessa-BaseInit\ШаблонОбработкиДляНачальногоЗаполнения.epf";
	
	ПромМассив = Новый Массив;
	ДобавитьМассивМакетовВОбработкуИКодМодуля(МассивМакетовСправочниковДляВставки,ПромМассив,ПутьКОбработке,Неопределено);
	
КонецПроцедуры



Процедура ВосстановитьНастройки()
	Настройки = ХранилищеОбщихНастроек.Загрузить("vanessa-base-init");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Настройки.Свойство("ПутьКГенераторуFixtures", ПутьКГенераторуFixtures);
		Настройки.Свойство("ПутьКPrecommit", ПутьКPrecommit);
		Настройки.Свойство("ПутьУПустомуПравильномуМакету", ПутьУПустомуПравильномуМакету);
		Настройки.Свойство("ПутьКШаблонуОбработки", ПутьКШаблонуОбработки);
		Настройки.Свойство("ПутьКГенерируемойEPF", ПутьКГенерируемойEPF);
		Настройки.Свойство("СколькоВыгружатьЭлементаСправочника", СколькоВыгружатьЭлементаСправочника);
		Настройки.Свойство("ПорогДляПолннойВыгрузкиСправочника", ПорогДляПолннойВыгрузкиСправочника);
		Настройки.Свойство("СписокКонстантКоторыеНеНадоВыгружать", СписокКонстантКоторыеНеНадоВыгружать);
		Настройки.Свойство("СписокВидовСправочниковКоторыеНеНадоВыгружать", СписокВидовСправочниковКоторыеНеНадоВыгружать);
		Настройки.Свойство("СписокВидовРСоторыеНеНадоВыгружать", СписокВидовРСоторыеНеНадоВыгружать);
		Настройки.Свойство("ПорогДляПолннойВыгрузкиРС", ПорогДляПолннойВыгрузкиРС);
		Настройки.Свойство("флагВыгружатьКонстанты", флагВыгружатьКонстанты);
		Настройки.Свойство("флагВыгружатьСправочники", флагВыгружатьСправочники);
		Настройки.Свойство("флагВыгружатьРС", флагВыгружатьРС);
		Настройки.Свойство("НеВыгружатьМетаданныеКоторыеНачинаютсяСоСловаУдалить", НеВыгружатьМетаданныеКоторыеНачинаютсяСоСловаУдалить);
		Настройки.Свойство("СтрокаПодключенияКxUnit", СтрокаПодключенияКxUnit);
		Настройки.Свойство("ТестовыйРежим", ТестовыйРежим);
	КонецЕсли;
КонецПроцедуры
 
Процедура СохранитьНастройки()
	Настройки = Новый Структура;
	Настройки.Вставить("ПутьКГенераторуFixtures", ПутьКГенераторуFixtures);
	Настройки.Вставить("ПутьКPrecommit", ПутьКPrecommit);
	Настройки.Вставить("ПутьУПустомуПравильномуМакету", ПутьУПустомуПравильномуМакету);
	Настройки.Вставить("ПутьКШаблонуОбработки", ПутьКШаблонуОбработки);
	Настройки.Вставить("ПутьКГенерируемойEPF", ПутьКГенерируемойEPF);
	Настройки.Вставить("СколькоВыгружатьЭлементаСправочника", СколькоВыгружатьЭлементаСправочника);
	Настройки.Вставить("ПорогДляПолннойВыгрузкиСправочника", ПорогДляПолннойВыгрузкиСправочника);
	Настройки.Вставить("СписокКонстантКоторыеНеНадоВыгружать", СписокКонстантКоторыеНеНадоВыгружать);
	Настройки.Вставить("СписокВидовСправочниковКоторыеНеНадоВыгружать", СписокВидовСправочниковКоторыеНеНадоВыгружать);
	Настройки.Вставить("СписокВидовРСоторыеНеНадоВыгружать", СписокВидовРСоторыеНеНадоВыгружать);
	Настройки.Вставить("ПорогДляПолннойВыгрузкиРС", ПорогДляПолннойВыгрузкиРС);
	Настройки.Вставить("флагВыгружатьКонстанты", флагВыгружатьКонстанты);
	Настройки.Вставить("флагВыгружатьСправочники", флагВыгружатьСправочники);
	Настройки.Вставить("флагВыгружатьРС", флагВыгружатьРС);
	Настройки.Вставить("НеВыгружатьМетаданныеКоторыеНачинаютсяСоСловаУдалить", НеВыгружатьМетаданныеКоторыеНачинаютсяСоСловаУдалить);
	Настройки.Вставить("СтрокаПодключенияКxUnit", СтрокаПодключенияКxUnit);
	Настройки.Вставить("ТестовыйРежим", ТестовыйРежим);
	ХранилищеОбщихНастроек.Сохранить("vanessa-base-init",, Настройки);
КонецПроцедуры
 


Процедура ПриОткрытии()
	ВосстановитьНастройки();
	
	ЭтаФорма.Заголовок = "Создание обработки по созданию fixtures для начального заполнения базы. " + ПолучитьВерсиюОбработки();
	
	//заполним настройки, если обработка открывается в первый раз - начало
	Если ПутьКГенераторуFixtures = "" Тогда
		ПутьКГенераторуFixtures = "C:\Commons\Rep\xUnitFor1C\xddDataFixtureGen.epf";
	КонецЕсли;	 
	Если ПутьКPrecommit = "" Тогда
		ПутьКPrecommit = "C:\Commons\Rep\vanessa-base-init\.git\hooks";
	КонецЕсли;	 
	Если ПутьУПустомуПравильномуМакету = "" Тогда
		ПутьУПустомуПравильномуМакету = "C:\Commons\Rep\vanessa-base-init\ПустойПравильныйМакет.mxl";
	КонецЕсли;	 
	Если ПутьКШаблонуОбработки = "" Тогда
		ПутьКШаблонуОбработки = "C:\Commons\Rep\vanessa-base-init\ШаблонОбработкиДляНачальногоЗаполнения.epf";
	КонецЕсли;	 
	Если ПутьКГенерируемойEPF = "" Тогда
		ПутьКГенерируемойEPF = "C:\Temp\111.epf";
	КонецЕсли;	 
	Если СколькоВыгружатьЭлементаСправочника = 0 Тогда
		СколькоВыгружатьЭлементаСправочника = 15;
	КонецЕсли;	 
	Если ПорогДляПолннойВыгрузкиСправочника = 0 Тогда
		ПорогДляПолннойВыгрузкиСправочника = 50;
	КонецЕсли;	 
	Если ПорогДляПолннойВыгрузкиРС = 0 Тогда
		ПорогДляПолннойВыгрузкиРС = 10;
	КонецЕсли;	 
	Если СтрокаПодключенияКxUnit = "" Тогда
		СтрокаПодключенияКxUnit = "	xUnit           = ВнешниеОбработки.Создать(""C:\Commons\Rep\xUnitFor1C\xddTestRunner.epf"");";
	КонецЕсли;	 
	//заполним настройки, если обработка открывается в первый раз - окончание
КонецПроцедуры

Процедура ПриЗакрытии()
	СохранитьНастройки();
КонецПроцедуры

Процедура ДобавитьДанныеИзMXLВТаблицу(Тзн)
	
	ДиалогФыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогФыбораФайла.Фильтр = "макет (*.mxl)|*.mxl";
	ДиалогФыбораФайла.Заголовок = "Выберите файл";                                         
	Если НЕ ДиалогФыбораФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	ТД = Новый ТабличныйДокумент;
	ТД.Прочитать(ДиалогФыбораФайла.ПолноеИмяФайла);
	Для Ккк = 2 По ТД.ВысотаТаблицы Цикл
		Зн = СокрЛП(ТД.Область(Ккк,1,Ккк,1).Текст);
		Если Зн = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		//Тзн = Новый СписокЗначений;
		СтрТзн = Тзн.НайтиПоЗначению(Зн);
		Если СтрТзн <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		Тзн.Добавить(Зн);
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель3ДобавитьИсключенияИзMxlКонстанты(Кнопка)
	ДобавитьДанныеИзMXLВТаблицу(СписокКонстантКоторыеНеНадоВыгружать);
КонецПроцедуры

Процедура КоманднаяПанель1ДобавитьИсключенияИзMxlСправочники(Кнопка)
	ДобавитьДанныеИзMXLВТаблицу(СписокВидовСправочниковКоторыеНеНадоВыгружать);
КонецПроцедуры

Процедура КоманднаяПанель2ДобавитьИсключенияИзMxlРС(Кнопка)
	ДобавитьДанныеИзMXLВТаблицу(СписокВидовРСоторыеНеНадоВыгружать);
КонецПроцедуры

//Сообщить("111  " + Метаданные.ОсновнойЯзык);
//Макет = Новый ТабличныйДокумент;
//Макет.Прочитать("c:\users\pautov\desktop\444.mxl");
//Макет.Показать();
//ыа = 1;
//Макет.КодЯзыкаМакета = Метаданные.ОсновнойЯзык.КодЯзыка;
//Макет.Показать();
//Макет.Записать("c:\users\pautov\desktop\333.mxl");
//ыва = 1;

//Метаданные.ОсновнойЯзык.КодЯзыка






